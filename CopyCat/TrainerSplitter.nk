set cut_paste_input [stack 0]
push $cut_paste_input
NoOp {
name TrainerSplitter
tile_color 0xf6700bff
gl_color 0xff
note_font "Ubuntu Medium"
note_font_size 26
selected true
addUserKnob {20 User}
addUserKnob {22 SplitIt l "Create Frame Holds" T "import random\nimport nuke\n\ndef create_frame_holds():\n    # Get the node (NoOp) and its input\n    node = nuke.thisNode()\n    input_node = node.input(0)\n\n    if not input_node:\n        nuke.message(\"Please connect an input to this node.\")\n        return\n\n    # User variables for customization\n    HORIZONTAL_SPACING = 400  \n    VERTICAL_SPACING = 400   \n    BACKDROP_COLOR = 0x7171C600  \n    MAIN_BACKDROP_COLOR = 0x6B6B6B00  \n    SMALL_BACKDROP_PADDING = 50   \n    MAIN_BACKDROP_PADDING = 100   \n    BACKDROP_LABEL_FONT_SIZE = 42\n    SMALL_BACKDROP_FONT_SIZE = 28\n    DOT_SPACING = 50            \n\n    def get_frame_range(node):\n        return node.firstFrame(), node.lastFrame()\n\n    def calculate_frame_holds(first_frame, last_frame, num_holds):\n        total_frames = last_frame - first_frame\n        interval = total_frames / (num_holds - 1) if num_holds > 1 else 0\n        \n        frame_holds = \[]\n        for i in range(num_holds):\n            frame = first_frame + (i * interval)\n            frame_holds.append(int(round(frame)))\n        \n        if frame_holds\[-1] != last_frame:\n            frame_holds\[-1] = last_frame\n        return frame_holds\n\n    # Get frame range\n    first_frame, last_frame = get_frame_range(input_node)\n    total_frames = last_frame - first_frame\n\n    # Find or create the ReformatTrainerHD node\n    reformat_node = nuke.toNode('ReformatTrainerHD')\n    if not reformat_node:\n        reformat_node = nuke.nodes.Reformat(\n            format=\"1280 720 0 0 1280 720 1 HD_720\",\n            name=\"ReformatTrainerHD\",\n            xpos=5092,\n            ypos=1544\n        )\n\n    # Create the BackdropNode for ReformatTrainerHD\n    reformat_backdrop = nuke.nodes.BackdropNode(\n        name=\"CopyCat_CopyCat1\",\n        tile_color=0xc7d1d6ff,\n        label=\"ReformatTrainerHD\",\n        note_font_size=42,\n        xpos=5032,\n        ypos=1455,\n        bdwidth=200,\n        bdheight=208\n    )\n\n    # Ask user for number of frame holds\n    try:\n        num_holds = int(nuke.getInput(\n            f'How many frame holds?\\n\\n'\n            f'Frame range: \{first_frame\}-\{last_frame\}\\n'\n            f'Total frames: \{total_frames\}', '10'))\n        \n        if num_holds <= 1:\n            nuke.message(\"Please enter a number greater than 1.\")\n            return\n        elif num_holds > total_frames:\n            nuke.message(f\"Number of holds (\{num_holds\}) cannot be greater than total frames (\{total_frames\}).\")\n            return\n            \n        # Calculate frame numbers for holds\n        frame_numbers = calculate_frame_holds(first_frame, last_frame, num_holds)\n\n        start_x = node.xpos()\n        start_y = node.ypos() + VERTICAL_SPACING\n        \n        # Store original input connection\n        original_input = node.input(0)\n        \n        # Create first dot from NoOp\n        first_dot = nuke.nodes.Dot()\n        first_dot.setInput(0, node)\n        first_dot.setXYpos(start_x + 34, start_y)\n        previous_dot = first_dot\n\n        frame_hold_nodes = \[]\n        dot_nodes = \[first_dot]\n        backdrop_nodes = \[]\n        output_dots = \[]\n\n        # Create nodes for each frame hold\n        for i, frame_number in enumerate(frame_numbers):\n            x_pos = start_x + (i * HORIZONTAL_SPACING)\n            y_pos = start_y + VERTICAL_SPACING\n\n            # Create input dot connected to previous dot\n            input_dot = nuke.nodes.Dot()\n            input_dot.setInput(0, previous_dot)\n            input_dot.setXYpos(x_pos + 34, start_y)\n            previous_dot = input_dot\n            dot_nodes.append(input_dot)\n\n            # Create frame hold\n            frame_hold = nuke.nodes.FrameHold()\n            frame_hold.setInput(0, input_dot)\n            frame_hold\['firstFrame'].setValue(int(frame_number))\n            frame_hold.setXYpos(x_pos, y_pos)\n            frame_hold\['label'].setValue(f\"Frame: \{frame_number\}\")\n            frame_hold\['tile_color'].setValue(int(0x7171C600))\n            frame_hold_nodes.append(frame_hold)\n\n            # Create output dot\n            output_dot = nuke.nodes.Dot()\n            output_dot.setInput(0, frame_hold)\n            output_dot.setXYpos(x_pos + 34, y_pos + frame_hold.screenHeight() + DOT_SPACING)\n            output_dots.append(output_dot)\n            dot_nodes.append(output_dot)\n\n            # Create backdrop\n            bdX = min(node.xpos() for node in \[input_dot, frame_hold, output_dot]) - SMALL_BACKDROP_PADDING\n            bdY = min(node.ypos() for node in \[input_dot, frame_hold, output_dot]) - SMALL_BACKDROP_PADDING\n            bdW = max(node.xpos() + node.screenWidth() for node in \[input_dot, frame_hold, output_dot]) - bdX + (SMALL_BACKDROP_PADDING * 2)\n            bdH = max(node.ypos() + node.screenHeight() for node in \[input_dot, frame_hold, output_dot]) - bdY + (SMALL_BACKDROP_PADDING * 2)\n\n            backdrop = nuke.nodes.BackdropNode(\n                xpos = bdX,\n                ypos = bdY,\n                bdwidth = bdW,\n                bdheight = bdH,\n                tile_color = BACKDROP_COLOR,\n                note_font_size = SMALL_BACKDROP_FONT_SIZE,\n                name = f'Frame_\{frame_number\}_Backdrop',\n                label = f\"Hold \{i + 1\}\\nFrame \{frame_number\}\"\n            )\n            backdrop_nodes.append(backdrop)\n\n        # Create AppendClip node aligned with NoOp\n        append_x = node.xpos()  # Same X as NoOp\n        append_y = start_y + (VERTICAL_SPACING * 2)\n        append_clip = nuke.nodes.AppendClip()\n        for i, output_dot in enumerate(output_dots):\n            append_clip.setInput(i, output_dot)\n        append_clip.setXYpos(append_x, append_y)\n        append_clip\['name'].setValue(f'FrameHoldAppend_\{random.randint(1000, 9999)\}')\n        append_clip\['label'].setValue(f\"Total Frames: \{len(frame_hold_nodes)\}\")\n\n        # Connect AppendClip to ReformatTrainerHD\n        reformat_node.setInput(0, append_clip)\n\n        # Set NoOp's input back to original input\n        node.setInput(0, original_input)\n\n        # Create main backdrop\n        all_nodes = frame_hold_nodes + dot_nodes + \[append_clip]\n        bdX = min(\[node.xpos() for node in all_nodes]) - MAIN_BACKDROP_PADDING\n        bdY = min(\[node.ypos() for node in all_nodes]) - MAIN_BACKDROP_PADDING\n        bdW = max(\[node.xpos() + node.screenWidth() for node in all_nodes]) - bdX + (MAIN_BACKDROP_PADDING * 2)\n        bdH = max(\[node.ypos() + node.screenHeight() for node in all_nodes]) - bdY + (MAIN_BACKDROP_PADDING * 2)\n\n        main_backdrop = nuke.nodes.BackdropNode(\n            xpos = bdX,\n            bdwidth = bdW,\n            ypos = bdY,\n            bdheight = bdH,\n            tile_color = MAIN_BACKDROP_COLOR,\n            note_font_size = BACKDROP_LABEL_FONT_SIZE,\n            name = f'FrameHoldSplitter_\{random.randint(1000, 9999)\}',\n            label = f\"Frame Hold Splitter\\n\{num_holds\} holds\\nInterval: \{int(round(total_frames/(num_holds-1)))\} frames\"\n        )\n\n        nuke.message(\n            f\"Created \{num_holds\} frame holds\\n\"\n            f\"Frame range: \{first_frame\}-\{last_frame\}\\n\"\n            f\"Interval: \{int(round(total_frames/(num_holds-1)))\} frames\"\n        )\n    except ValueError:\n        nuke.message(\"Please enter a valid number.\")\n\n# Call the main function\ncreate_frame_holds()\n" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {26 email l "" +STARTLINE T "<b><font color='DodgerBlue'>Advanced Antialiasing Filter v3.0</font></b><br> <font size=\"1\"><i>by Martin Tomek</i><br> <br> martintomek.vfx@gmail.com<br> www.martintomek-vfx.com</font>\n\n"}
}
